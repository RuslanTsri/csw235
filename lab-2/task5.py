from abc import ABC, abstractmethod

class Character:
    def __init__(self, role, name):
        self.role = role
        self.name = name
        self.height = None
        self.body_type = None
        self.hair_color = None
        self.eye_color = None
        self.clothes = None
        self.weapon = None
        self.inventory = []
        self.actions = []

    def __str__(self):
        return (f"üîπ {self.role}: {self.name}\n"
                f"  üî∏ –ó—Ä—ñ—Å—Ç: {self.height}\n"
                f"  üî∏ –°—Ç–∞—Ç—É—Ä–∞: {self.body_type}\n"
                f"  üî∏ –ö–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è: {self.hair_color}\n"
                f"  üî∏ –ö–æ–ª—ñ—Ä –æ—á–µ–π: {self.eye_color}\n"
                f"  üî∏ –û–¥—è–≥: {self.clothes}\n"
                f"  üî∏ –ó–±—Ä–æ—è: {self.weapon}\n"
                f"  üî∏ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä: {', '.join(self.inventory) if self.inventory else '–ü–æ—Ä–æ–∂–Ω—å–æ'}\n"
                f"  üî∏ –î—ñ—ó: {', '.join(self.actions) if self.actions else '–ù–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞–≤ –¥—ñ–π'}\n")

class CharacterBuilder(ABC):
    def __init__(self, role, name):
        self.character = Character(role, name)

    def set_height(self, height):
        self.character.height = height
        return self

    def set_body_type(self, body_type):
        self.character.body_type = body_type
        return self

    def set_hair_color(self, color):
        self.character.hair_color = color
        return self

    def set_eye_color(self, color):
        self.character.eye_color = color
        return self

    def set_clothes(self, clothes):
        self.character.clothes = clothes
        return self

    def set_weapon(self, weapon):
        self.character.weapon = weapon
        return self

    def add_item(self, item):
        self.character.inventory.append(item)
        return self

    @abstractmethod
    def add_special_action(self, action):
        pass

    def build(self):
        return self.character

class HeroBuilder(CharacterBuilder):
    def __init__(self, name):
        super().__init__("–ë–æ–≥–∞—Ç–∏—Ä", name)

    def add_special_action(self, action):
        self.character.actions.append(f"–î–æ–±—Ä–∏–π –≤—á–∏–Ω–æ–∫: {action}")
        return self

class EnemyBuilder(CharacterBuilder):
    def __init__(self, name):
        super().__init__("–û—Ä–∫", name)

    def add_special_action(self, action):
        self.character.actions.append(f"–ó–ª–∏–π –≤—á–∏–Ω–æ–∫: {action}")
        return self

class Director:
    @staticmethod
    def create_bogatyr():
        return (HeroBuilder("–Ü–ª–ª—è –ú—É—Ä–æ–º–µ—Ü—å")
                .set_height("200 —Å–º")
                .set_body_type("–ú—ñ—Ü–Ω–∞, –º—É—Å–∫—É–ª–∏—Å—Ç–∞")
                .set_hair_color("–°–≤—ñ—Ç–ª–∏–π")
                .set_eye_color("–°–∏–Ω—ñ")
                .set_clothes("–ó–æ–ª–æ—Ç—ñ –æ–±–ª–∞–¥—É–Ω–∫–∏, —á–µ—Ä–≤–æ–Ω–∏–π –ø–ª–∞—â")
                .set_weapon("–ö—ñ–Ω–Ω–∏–π —Å–ø–∏—Å")
                .add_item("–ú–µ—á –±–æ–≥–∞—Ç–∏—Ä—Å—å–∫–∏–π")
                .add_item("–û–±—Ä—É—á —á–µ—Å—Ç—ñ")
                .add_special_action("–ó–∞—Ö–∏—Å—Ç–∏–≤ –∫–Ω—è–∑—ñ–≤—Å—Ç–≤–æ –≤—ñ–¥ –≤–æ—Ä–æ–≥—ñ–≤")
                .add_special_action("–ü–µ—Ä–µ–º—ñ–≥ –ó–º—ñ—è –ì–æ—Ä–∏–Ω–∏—á–∞")
                .build())

    @staticmethod
    def create_orc():
        return (EnemyBuilder("–ì—Ä–æ–≥-–ú—è—Å–æ—Ä—É–±")
                .set_height("230 —Å–º")
                .set_body_type("–ì—ñ–≥–∞–Ω—Ç—Å—å–∫–∞, –º—É—Å–∫—É–ª–∏—Å—Ç–∞")
                .set_hair_color("–õ–∏—Å–∏–π, –∑–µ–ª–µ–Ω–æ–∫–æ–∂–∏–π")
                .set_eye_color("–ü–∞–ª–∞—é—á—ñ —á–µ—Ä–≤–æ–Ω—ñ")
                .set_clothes("–ë—Ä–æ–Ω—è –∑ —á–µ—Ä–µ–ø–∞–º–∏")
                .set_weapon("–í–µ–ª–∏—á–µ–∑–Ω–∞ –±—É–ª–∞–≤–∞")
                .add_item("–ê–º—É–ª–µ—Ç —Ç–µ–º—Ä—è–≤–∏")
                .add_item("–§–ª–∞–∫–æ–Ω –æ—Ç—Ä—É—Ç–∏")
                .add_special_action("–†–æ–∑–≥—Ä–∞–±—É–≤–∞–≤ —Å–µ–ª–æ")
                .add_special_action("–ó–∞—Ö–æ–ø–∏–≤ —Ñ–æ—Ä—Ç–µ—Ü—é –ª—é–¥–µ–π")
                .build())

def main():
    bogatyr = Director.create_bogatyr()
    orc = Director.create_orc()

    print(bogatyr)
    print(orc)

if __name__ == "__main__":
    main()
