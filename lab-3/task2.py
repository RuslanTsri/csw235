from abc import ABC, abstractmethod
import time
import random
import os
import sys
from termcolor import colored

def fancy_print(text, color=None, delay=0.03, style=None):
    for char in text:
        sys.stdout.write(colored(char, color, attrs=style))
        sys.stdout.flush()
        time.sleep(delay)
    sys.stdout.write('\n')

def print_box(message, width=50, title="", color="white"):
    lines = message.split('\n')
    space = width - 4
    
    if title:
        title = f" {title} "
        left_padding = (width - len(title)) // 2
        right_padding = width - len(title) - left_padding
        fancy_print(f"‚ï≠{'‚îÄ' * left_padding}{title}{'‚îÄ' * right_padding}‚ïÆ", color)
    else:
        fancy_print(f"‚ï≠{'‚îÄ' * (width - 2)}‚ïÆ", color)
    
    for line in lines:
        chunks = [line[i:i+space] for i in range(0, len(line), space)]
        for chunk in chunks:
            padding = space - len(chunk)
            fancy_print(f"‚îÇ {chunk}{' ' * padding}   ‚îÇ", color)
    
    fancy_print(f"‚ï∞{'‚îÄ' * (width)}‚ïØ", color)
    time.sleep(0.5)

class Hero(ABC):
    @abstractmethod
    def get_description(self):
        pass

    @abstractmethod
    def get_attack(self):
        pass

    @abstractmethod
    def get_defense(self):
        pass

    @abstractmethod
    def get_health(self):
        pass
    
    @abstractmethod
    def display_stats(self):
        pass

class Warrior(Hero):
    def get_description(self):
        return "–í–æ—ó–Ω"

    def get_attack(self):
        return 10

    def get_defense(self):
        return 8

    def get_health(self):
        return 100
    
    def display_stats(self):
        description = f"{self.get_description()}"
        stats = f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {self.get_attack()}  |  üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: {self.get_defense()}  |  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {self.get_health()}"
        print_box(stats, width=60, title=description, color="red")


class Mage(Hero):
    def get_description(self):
        return "–ú–∞–≥"

    def get_attack(self):
        return 15

    def get_defense(self):
        return 4

    def get_health(self):
        return 70
    
    def display_stats(self):
        description = f"{self.get_description()}"
        stats = f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {self.get_attack()}  |  üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: {self.get_defense()}  |  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {self.get_health()}"
        print_box(stats, width=60, title=description, color="blue")


class Paladin(Hero):
    def get_description(self):
        return "–ü–∞–ª–∞–¥—ñ–Ω"

    def get_attack(self):
        return 8

    def get_defense(self):
        return 12

    def get_health(self):
        return 120
    
    def display_stats(self):
        description = f"{self.get_description()}"
        stats = f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {self.get_attack()}  |  üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: {self.get_defense()}  |  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {self.get_health()}"
        print_box(stats, width=60, title=description, color="yellow")


class ItemDecorator(Hero):
    def __init__(self, hero):
        self.hero = hero
        self._item_name = "–ü—Ä–µ–¥–º–µ—Ç"
        self._attack_bonus = 0
        self._defense_bonus = 0
        self._health_bonus = 0

    def get_description(self):
        return self.hero.get_description()

    def get_attack(self):
        return self.hero.get_attack() + self._attack_bonus

    def get_defense(self):
        return self.hero.get_defense() + self._defense_bonus

    def get_health(self):
        return self.hero.get_health() + self._health_bonus
    
    def display_stats(self):
        description = f"{self.get_description()}"
        stats = f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {self.get_attack()}  |  üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: {self.get_defense()}  |  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {self.get_health()}"
        
        if isinstance(self.hero, ItemDecorator):
            color = random.choice(["cyan", "magenta", "green", "white"])
        else:
            if isinstance(self.hero, Warrior):
                color = "red"
            elif isinstance(self.hero, Mage):
                color = "blue"
            else:
                color = "yellow"
        
        print_box(stats, width=60, title=description, color=color)


class Sword(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ú–µ—á"
        self._attack_bonus = 7

    def get_description(self):
        return f"{self.hero.get_description()} –∑ –º–µ—á–µ–º"


class Staff(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ü–æ—Å–æ—Ö"
        self._attack_bonus = 5
        self._health_bonus = 15

    def get_description(self):
        return f"{self.hero.get_description()} –∑ –ø–æ—Å–æ—Ö–æ–º"


class Hammer(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ú–æ–ª–æ—Ç"
        self._attack_bonus = 10
        self._defense_bonus = 2

    def get_description(self):
        return f"{self.hero.get_description()} –∑ –º–æ–ª–æ—Ç–æ–º"


class LeatherArmor(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–®–∫—ñ—Ä—è–Ω–∞ –±—Ä–æ–Ω—è"
        self._defense_bonus = 3

    def get_description(self):
        return f"{self.hero.get_description()} –≤ —à–∫—ñ—Ä—è–Ω—ñ–π –±—Ä–æ–Ω—ñ"


class PlateArmor(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–õ–∞—Ç–Ω–∞ –±—Ä–æ–Ω—è"
        self._defense_bonus = 8
        self._health_bonus = 20

    def get_description(self):
        return f"{self.hero.get_description()} –≤ –ª–∞—Ç–Ω—ñ–π –±—Ä–æ–Ω—ñ"


class Robe(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ú–∞–≥—ñ—á–Ω–∞ –º–∞–Ω—Ç—ñ—è"
        self._defense_bonus = 2
        self._attack_bonus = 3

    def get_description(self):
        return f"{self.hero.get_description()} –≤ –º–∞–≥—ñ—á–Ω—ñ–π –º–∞–Ω—Ç—ñ—ó"


class AmuletOfPower(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ê–º—É–ª–µ—Ç —Å–∏–ª–∏"
        self._attack_bonus = 4
        self._health_bonus = 10

    def get_description(self):
        return f"{self.hero.get_description()} –∑ –∞–º—É–ª–µ—Ç–æ–º —Å–∏–ª–∏"


class RingOfProtection(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–ü–µ—Ä—Å—Ç–µ–Ω—å –∑–∞—Ö–∏—Å—Ç—É"
        self._defense_bonus = 5

    def get_description(self):
        return f"{self.hero.get_description()} –∑ –ø–µ—Ä—Å–Ω–µ–º –∑–∞—Ö–∏—Å—Ç—É"


class Helmet(ItemDecorator):
    def __init__(self, hero):
        super().__init__(hero)
        self._item_name = "–®–æ–ª–æ–º"
        self._defense_bonus = 4
        self._health_bonus = 5

    def get_description(self):
        return f"{self.hero.get_description()} –≤ —à–æ–ª–æ–º—ñ"


def create_hero_scene(hero_class, name):
    os.system('cls' if os.name == 'nt' else 'clear')
    fancy_print("–°–¢–í–û–†–ï–ù–ù–Ø –ì–ï–†–û–Ø...", "yellow", delay=0.1, style=["bold"])
    time.sleep(1)
    
    fancy_print(f"–ó –≥–ª–∏–±–∏–Ω —Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—è–≤–ª—è—î—Ç—å—Å—è –Ω–æ–≤–∞ –¥—É—à–∞...", "cyan", delay=0.05)
    time.sleep(0.5)
    
    if hero_class == Warrior:
        fancy_print("–ú–æ–≥—É—Ç–Ω—ñ–π –í–û–á–ù! –î—É—Ö –±–∏—Ç–≤–∏ –Ω–∞–ø–æ–≤–Ω—é—î –π–æ–≥–æ —Å–µ—Ä—Ü–µ!", "red", delay=0.05, style=["bold"])
    elif hero_class == Mage:
        fancy_print("–ó–∞–≥–∞–¥–∫–æ–≤–∏–π –ú–ê–ì! –ü–æ—Ç—ñ–∫ –º–∞–≥—ñ—ó —Ç–µ—á–µ —á–µ—Ä–µ–∑ –π–æ–≥–æ –≤–µ–Ω–∏!", "blue", delay=0.05, style=["bold"])
    elif hero_class == Paladin:
        fancy_print("–ë–ª–∞–≥–æ—Ä–æ–¥–Ω–∏–π –ü–ê–õ–ê–î–Ü–ù! –°–≤—ñ—Ç–ª–æ —ñ –º—É–∂–Ω—ñ—Å—Ç—å ‚Äî –π–æ–≥–æ –∑–±—Ä–æ—è!", "yellow", delay=0.05, style=["bold"])
    
    time.sleep(1)
    hero = hero_class()
    hero.display_stats()
    return hero


def equip_item_scene(hero, item_class):
    fancy_print("\n–ï–ö–Ü–ü–Ü–†–£–í–ê–ù–ù–Ø –ì–ï–†–û–Ø...", "magenta", delay=0.08, style=["bold"])
    time.sleep(0.8)
    
    item_names = {
        Sword: "–ú–ï–ß", Staff: "–ü–û–°–û–•", Hammer: "–ú–û–õ–û–¢",
        LeatherArmor: "–®–ö–Ü–†–Ø–ù–£ –ë–†–û–ù–Æ", PlateArmor: "–õ–ê–¢–ù–£ –ë–†–û–ù–Æ", Robe: "–ú–ê–ì–Ü–ß–ù–£ –ú–ê–ù–¢–Ü–Æ",
        AmuletOfPower: "–ê–ú–£–õ–ï–¢ –°–ò–õ–ò", RingOfProtection: "–ü–ï–†–°–¢–ï–ù–¨ –ó–ê–•–ò–°–¢–£", Helmet: "–®–û–õ–û–ú"
    }
    
    item_name = item_names.get(item_class, "–ü–†–ï–î–ú–ï–¢")
    fancy_print(f"–ì–µ—Ä–æ–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å {item_name}!", "green", delay=0.05)
    
    sys.stdout.write("–ï–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è")
    for _ in range(5):
        sys.stdout.write(".")
        sys.stdout.flush()
        time.sleep(0.3)
    sys.stdout.write(" –ó–ê–í–ï–†–®–ï–ù–û!\n")
    time.sleep(0.5)
    
    decorated_hero = item_class(hero)
    decorated_hero.display_stats()
    return decorated_hero


def epic_battle_simulation(hero1, hero2):
    fancy_print("\n‚öîÔ∏è –ï–ü–Ü–ß–ù–ê –ë–ò–¢–í–ê! ‚öîÔ∏è", "yellow", delay=0.1, style=["bold"])
    time.sleep(1)
    
    fancy_print(f"{hero1.get_description()} –ø—Ä–æ—Ç–∏ {hero2.get_description()}!", "red", delay=0.05)
    time.sleep(0.5)
    
    hero1_hp = hero1.get_health()
    hero2_hp = hero2.get_health()
    
    round_num = 1
    while hero1_hp > 0 and hero2_hp > 0:
        fancy_print(f"\n–†–∞—É–Ω–¥ {round_num}", "cyan", delay=0.05, style=["bold"])
        time.sleep(0.5)
        
        damage = max(1, hero1.get_attack() - hero2.get_defense() // 2)
        hero2_hp -= damage
        fancy_print(f"{hero1.get_description()} –∑–∞–≤–¥–∞—î {damage} —à–∫–æ–¥–∏! –£ {hero2.get_description()} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è {max(0, hero2_hp)} –∑–¥–æ—Ä–æ–≤'—è", "white", delay=0.03)
        time.sleep(0.3)
        
        if hero2_hp <= 0:
            break
            
        damage = max(1, hero2.get_attack() - hero1.get_defense() // 2)
        hero1_hp -= damage
        fancy_print(f"{hero2.get_description()} –∑–∞–≤–¥–∞—î {damage} —à–∫–æ–¥–∏! –£ {hero1.get_description()} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è {max(0, hero1_hp)} –∑–¥–æ—Ä–æ–≤'—è", "white", delay=0.03)
        
        round_num += 1
        time.sleep(0.7)
    
    fancy_print("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ò–¢–í–ò üèÜ", "yellow", delay=0.1, style=["bold"])
    if hero1_hp <= 0 and hero2_hp <= 0:
        fancy_print("–ù–Ü–ß–ò–Ø! –û–±–∏–¥–≤–∞ –≥–µ—Ä–æ—ó –≤–ø–∞–ª–∏ –≤—ñ–¥ –≤–∏—Å–Ω–∞–∂–µ–Ω–Ω—è!", "yellow", delay=0.05)
    elif hero1_hp <= 0:
        fancy_print(f"–ü–ï–†–ï–ú–û–ì–ê! {hero2.get_description()} –∑–¥–æ–±—É–≤–∞—î –ø–µ—Ä–µ–º–æ–≥—É!", "green", delay=0.05)
    else:
        fancy_print(f"–ü–ï–†–ï–ú–û–ì–ê! {hero1.get_description()} –∑–¥–æ–±—É–≤–∞—î –ø–µ—Ä–µ–º–æ–≥—É!", "green", delay=0.05)


def main():
    os.system('cls' if os.name == 'nt' else 'clear')
    fancy_print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó", "yellow", delay=0.01)
    fancy_print("‚ïë      –õ–ï–ì–ï–ù–î–ò –§–ï–ù–¢–ï–ó–Ü–ô–ù–ò–• –°–í–Ü–¢–Ü–í     ‚ïë", "yellow", delay=0.01)
    fancy_print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù", "yellow", delay=0.01)
    time.sleep(1)
    
    warrior = create_hero_scene(Warrior, "–í–æ—ó–Ω")
    time.sleep(1)

    equipped_warrior = warrior
    equipped_warrior = equip_item_scene(equipped_warrior, Sword)
    time.sleep(0.5)
    equipped_warrior = equip_item_scene(equipped_warrior, PlateArmor)
    time.sleep(0.5)
    equipped_warrior = equip_item_scene(equipped_warrior, Helmet)
    
    fancy_print("\n\n" + "=" * 60, "white", delay=0.01)
    time.sleep(0.5)
    mage = create_hero_scene(Mage, "–ú–∞–≥")
    time.sleep(1)
    
    equipped_mage = mage
    equipped_mage = equip_item_scene(equipped_mage, Staff)
    time.sleep(0.5)
    equipped_mage = equip_item_scene(equipped_mage, Robe)
    time.sleep(0.5)
    equipped_mage = equip_item_scene(equipped_mage, AmuletOfPower)
    
    time.sleep(1)
    fancy_print("\n\n" + "=" * 60, "white", delay=0.01)
    epic_battle_simulation(equipped_warrior, equipped_mage)
    
    time.sleep(1)
    fancy_print("\n\n" + "=" * 60, "white", delay=0.01)
    fancy_print("–°–¢–í–û–†–ï–ù–ù–Ø –õ–ï–ì–ï–ù–î–ê–†–ù–û–ì–û –ì–ï–†–û–Ø", "cyan", delay=0.05, style=["bold"])
    time.sleep(1)
    
    paladin = create_hero_scene(Paladin, "–ü–∞–ª–∞–¥—ñ–Ω")
    super_paladin = paladin
    super_paladin = equip_item_scene(super_paladin, Hammer)
    super_paladin = equip_item_scene(super_paladin, PlateArmor)
    super_paladin = equip_item_scene(super_paladin, Helmet)
    super_paladin = equip_item_scene(super_paladin, RingOfProtection)
    super_paladin = equip_item_scene(super_paladin, AmuletOfPower)
    
    fancy_print("\n–õ–ï–ì–ï–ù–î–ê–†–ù–ò–ô –ì–ï–†–û–ô –°–¢–í–û–†–ï–ù–ò–ô!", "yellow", delay=0.05, style=["bold"])
    time.sleep(1)
    fancy_print("\n–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ—Ä–æ—ó–≤ –∑ —Ä—ñ–∑–Ω–∏–º —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è–º.", "green", delay=0.02)
    fancy_print("–ö–æ–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –±–æ–Ω—É—Å–∏ –¥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è.", "green", delay=0.02)
    fancy_print("–ú–æ–∂–ª–∏–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.", "green", delay=0.02)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        fancy_print("\n–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", "red")
    except Exception as e:
        fancy_print(f"\n–ü–æ–º–∏–ª–∫–∞: {e}", "red")